{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.38.3",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@description",
          "syntaxKind": "block"
        },
        {
          "tagName": "@name",
          "syntaxKind": "block"
        },
        {
          "tagName": "@function",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true,
        "@description": true,
        "@name": true,
        "@function": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "css-vars-hook!",
  "docComment": "",
  "name": "css-vars-hook",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "css-vars-hook!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "css-vars-hook!LocalRootProps:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LocalRootProps<TTheme extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "UnitType",
              "canonicalReference": "css-vars-hook!UnitType:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "UnitType",
              "canonicalReference": "css-vars-hook!UnitType:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "JSX.IntrinsicAttributes",
              "canonicalReference": "@types/react!__global.JSX.IntrinsicAttributes:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "HTMLAttributes",
              "canonicalReference": "@types/react!React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    children?: "
            },
            {
              "kind": "Reference",
              "text": "ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    className?: string;\n    as?: string;\n    theme?: TTheme;\n    setTheme?: (arg0: TTheme) => void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/LocalTheme/LocalRoot.d.ts",
          "releaseTag": "Public",
          "name": "LocalRootProps",
          "typeParameters": [
            {
              "typeParameterName": "TTheme",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 11,
            "endIndex": 19
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "css-vars-hook!ROOT_ID:var",
          "docComment": "/**\n * Id attribute of the library root div.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ROOT_ID = "
            },
            {
              "kind": "Content",
              "text": "\"root-theme\""
            }
          ],
          "fileUrlPath": "types/config.d.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ROOT_ID",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "css-vars-hook!RootThemeProvider:var",
          "docComment": "/**\n * Root theme context provider also creates div to contain CSS properties. `ThemeType` is declared globally.\n *\n * @see\n *\n * ThemeType\n *\n * @see\n *\n * https://github.com/morewings/css-vars-hook#type-safety\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RootThemeProvider: "
            },
            {
              "kind": "Reference",
              "text": "FC",
              "canonicalReference": "@types/react!React.FC:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    children: "
            },
            {
              "kind": "Reference",
              "text": "ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    theme: "
            },
            {
              "kind": "Reference",
              "text": "ThemeType",
              "canonicalReference": "!\"\\\"css-vars-hook\\\"\".ThemeType:type"
            },
            {
              "kind": "Content",
              "text": ";\n    className?: string;\n}>"
            }
          ],
          "fileUrlPath": "types/RootTheme/RootThemeProvider.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "RootThemeProvider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "css-vars-hook!UnitType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UnitType = "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "types/UnitType.d.ts",
          "releaseTag": "Public",
          "name": "UnitType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "css-vars-hook!useLocalTheme:var",
          "docComment": "/**\n * React hook to apply multiple CSS variables to generated local root element (LocalRoot) and manipulate them. Theme type is inferred from provided theme parameter.\n *\n * @example\n *\n * const {setTheme, getTheme, LocalRoot, getVariable, setVariable} = useLocalTheme(); const setThemeIvory = () => { setTheme({foo: 'ivory'}); console.log('full theme', getTheme()) // => {foo: 'ivory'}; console.log('foo value', getVariable('foo')) // => 'ivory'; }; return <LocalRoot theme={{foo: 'bar'}} className=\"demo-local\">//...\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useLocalTheme: "
            },
            {
              "kind": "Content",
              "text": "<TTheme extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "UnitType",
              "canonicalReference": "css-vars-hook!UnitType:type"
            },
            {
              "kind": "Content",
              "text": ">>() => {\n    setTheme: (nextTheme: TTheme) => void;\n    getTheme: () => TTheme;\n    LocalRoot: ({ children, ...restProps }: "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "LocalRootProps",
              "canonicalReference": "css-vars-hook!LocalRootProps:type"
            },
            {
              "kind": "Content",
              "text": ", 'setTheme'>) => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ref: "
            },
            {
              "kind": "Reference",
              "text": "React.MutableRefObject",
              "canonicalReference": "@types/react!React.MutableRefObject:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    getVariable: (variableName: string) => "
            },
            {
              "kind": "Reference",
              "text": "UnitType",
              "canonicalReference": "css-vars-hook!UnitType:type"
            },
            {
              "kind": "Content",
              "text": ";\n    setVariable: (variableName: string, variableValue: "
            },
            {
              "kind": "Reference",
              "text": "UnitType",
              "canonicalReference": "css-vars-hook!UnitType:type"
            },
            {
              "kind": "Content",
              "text": ") => void;\n}"
            }
          ],
          "fileUrlPath": "types/LocalTheme/useLocalTheme.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "useLocalTheme",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 20
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "css-vars-hook!useRootTheme:var",
          "docComment": "/**\n * React hook to apply multiple CSS variables to theme root and manipulate them. `ThemeType` is defined on project level.\n *\n * @see\n *\n * ThemeType\n *\n * @see\n *\n * https://github.com/morewings/css-vars-hook#type-safety\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useRootThemePublic: "
            },
            {
              "kind": "Content",
              "text": "() => {\n    setTheme: (nextTheme: import(\"css-vars-hook\")."
            },
            {
              "kind": "Reference",
              "text": "ThemeType",
              "canonicalReference": "!\"\\\"css-vars-hook\\\"\".ThemeType:type"
            },
            {
              "kind": "Content",
              "text": ") => void;\n    getTheme: () => import(\"css-vars-hook\")."
            },
            {
              "kind": "Reference",
              "text": "ThemeType",
              "canonicalReference": "!\"\\\"css-vars-hook\\\"\".ThemeType:type"
            },
            {
              "kind": "Content",
              "text": ";\n    setVariable: (variableName: string, value: import(\"..\")."
            },
            {
              "kind": "Reference",
              "text": "UnitType",
              "canonicalReference": "css-vars-hook!UnitType:type"
            },
            {
              "kind": "Content",
              "text": ") => void;\n    getVariable: (variableName: string) => string;\n    removeVariable: (variableName: string) => void;\n}"
            }
          ],
          "fileUrlPath": "types/RootTheme/useRootThemePublic.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "useRootTheme",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "css-vars-hook!useTheme:var",
          "docComment": "/**\n * @deprecated\n *\n * `useLocalTheme` is recommended instead\n *\n * @example\n *\n * const {getTheme, setTheme, LocalRoot} = useLocalTheme()\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useTheme: "
            },
            {
              "kind": "Content",
              "text": "(theme: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string>) => {\n    ref: import(\"react\")."
            },
            {
              "kind": "Reference",
              "text": "MutableRefObject",
              "canonicalReference": "@types/react!React.MutableRefObject:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    setRef: (element: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ") => void;\n    style: import(\"react\")."
            },
            {
              "kind": "Reference",
              "text": "CSSProperties",
              "canonicalReference": "@types/react!React.CSSProperties:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    setVariable: (variableName: string, value: import(\"./UnitType\")."
            },
            {
              "kind": "Reference",
              "text": "UnitType",
              "canonicalReference": "css-vars-hook!UnitType:type"
            },
            {
              "kind": "Content",
              "text": ") => void;\n    getVariable: (variableName: string) => string;\n    removeVariable: (variableName: string) => void;\n    getTheme: () => "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string>;\n    setTheme: (nextTheme: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string>) => void;\n}"
            }
          ],
          "fileUrlPath": "types/useTheme.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "useTheme",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 18
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "css-vars-hook!useVariable:var",
          "docComment": "/**\n * @deprecated\n *\n * `useLocalTheme` is recommended instead\n *\n * @example\n *\n * const {getVariable, setVariable, LocalRoot} = useLocalTheme()\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useVariable: "
            },
            {
              "kind": "Content",
              "text": "(name: string, value: string) => {\n    ref: import(\"react\")."
            },
            {
              "kind": "Reference",
              "text": "MutableRefObject",
              "canonicalReference": "@types/react!React.MutableRefObject:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    setRef: (element: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ") => void;\n    style: import(\"react\")."
            },
            {
              "kind": "Reference",
              "text": "CSSProperties",
              "canonicalReference": "@types/react!React.CSSProperties:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    setVariable: (variableName: string, value: import(\"./UnitType\")."
            },
            {
              "kind": "Reference",
              "text": "UnitType",
              "canonicalReference": "css-vars-hook!UnitType:type"
            },
            {
              "kind": "Content",
              "text": ") => void;\n    getVariable: (variableName: string) => string;\n    removeVariable: (variableName: string) => void;\n}"
            }
          ],
          "fileUrlPath": "types/useVariable.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "useVariable",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        }
      ]
    }
  ]
}
