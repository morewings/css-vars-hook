{"version":3,"sources":["lib/utils.js","lib/useTheme.js","environment/DemoColor/DemoColor.js","environment/DemoMovement/DemoMovement.js","lib/useVariable.js","environment/App/App.js","index.js","environment/App/App.module.css"],"names":["setCSSVariable","ref","variableName","value","element","current","style","setProperty","getCSSVariable","getPropertyValue","useTheme","theme","useRef","setVariable","getVariable","removeVariable","removeProperty","removeCSSVariable","keys","Object","result","forEach","key","createStyleObject","setRef","useCallback","boxColor","renderCount","DemoColor","useState","colorValue","setColorValue","useLayoutEffect","className","htmlFor","id","type","onChange","e","target","onClick","DemoMovement","name","useVariable","stop","setStop","useEffect","interval","setInterval","parseInt","clearInterval","prevState","App","classes","container","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7f5889d1.chunk.js","sourcesContent":["/** @function\n * @name setCSSVariable\n * @description Set CSS variable\n * @param {MutableRefObject<HTMLElement>} ref - React ref\n * @return {function(string, string): void}\n */\nexport const setCSSVariable = ref => (variableName, value) => {\n  const element = ref.current;\n  element && element.style.setProperty(`--${variableName}`, value);\n};\n\n/** @function\n * @name removeCSSVariable\n * @description Remove CSS variable\n * @param {MutableRefObject<HTMLElement>} ref - React ref\n * @return {function(string): void}\n */\nexport const removeCSSVariable = ref => variableName => {\n  const element = ref.current;\n  element && element.style.removeProperty(`--${variableName}`);\n};\n\n/** @function\n * @name getCSSVariable\n * @description Get CSS variable value\n * @param {MutableRefObject<HTMLElement>} ref - React ref\n * @return {function(string): string}\n */\nexport const getCSSVariable = ref => variableName => {\n  const element = ref.current;\n  return element && element.style.getPropertyValue(`--${variableName}`);\n};\n\n/** @function\n * @name createStyleObject\n * @description Adds `--` prefix to property names in theme object\n * @param {Object<string, string>} theme - Theme object\n * @return {Object<string, string>}\n */\nexport const createStyleObject = theme => {\n  const keys = Object.keys(theme);\n  const result = {};\n  keys.forEach(key => {\n    // eslint-disable-next-line fp/no-mutation\n    result[`--${key}`] = theme[key];\n  });\n  return result;\n};\n","import {useRef, useCallback} from 'react';\nimport {setCSSVariable, getCSSVariable, createStyleObject, removeCSSVariable} from 'lib/utils';\n\n/**\n * @typedef {Object} UseThemeInterface\n * @property {MutableRefObject<HTMLElement>} ref - React ref. Use as theme container element getter only.\n * @property {function(element: (HTMLElement | null)): void} setRef - Theme container element setter.\n * @property {Object<string, string>} style - Theme object with all property names prefixed `--`.\n * @property {function(string): string} getVariable - Get variable value. getCSSVariable with bound ref.\n * @see src/lib/utils.js\n * @property {function(variableName: string, value: (string|number)): void} setVariable - Set variable value. setCSSVariable with bound ref.\n * @property {function(variableName: string): string} getVariable - Get variable value. getCSSVariable with bound ref.\n * @property {function(variableName: string): void} removeVariable - Remove variable. removeCSSVariable with bound ref.\n */\n\n/** @function\n * @name useTheme\n * @description React hook to apply multiple CSS variables and manipulate them.\n * @param {Object<string, string>} theme - React ref\n * @return {UseThemeInterface}\n */\nexport const useTheme = theme => {\n  const ref = useRef(null);\n  const setVariable = setCSSVariable(ref);\n  const getVariable = getCSSVariable(ref);\n  const removeVariable = removeCSSVariable(ref);\n  const style = createStyleObject(theme);\n  const setRef = useCallback(\n    element => {\n      if (ref.current) {\n        // Make sure to cleanup any events/references added to the last instance\n      }\n\n      if (element) {\n        Object.keys(theme).forEach(key => {\n          const isEqual = getCSSVariable({current: element})(key) === theme[key];\n          !isEqual && setCSSVariable({current: element})(key, theme[key]);\n        });\n      }\n\n      // Save a reference to the node\n      ref.current = element;\n    },\n    [theme]\n  );\n\n  return {ref, setRef, style, setVariable, getVariable, removeVariable};\n};\n","import React, {useState, useLayoutEffect} from 'react';\nimport {useTheme} from 'lib';\nimport './style.css';\n\nconst theme = {boxColor: 'yellow'};\n\nlet renderCount = 0;\n\nexport const DemoColor = () => {\n  const [colorValue, setColorValue] = useState(theme.boxColor);\n  const {setRef, setVariable} = useTheme(theme);\n\n  useLayoutEffect(() => {\n    // eslint-disable-next-line fp/no-mutation\n    renderCount += 1;\n  });\n\n  return (\n    <div className=\"demo-color\" ref={setRef}>\n      <fieldset>\n        {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n        <label htmlFor=\"colorName\">Set box color. Needs to be a valid CSS color (name, HEX, rgba etc).</label>\n        <input\n          value={colorValue}\n          id=\"colorName\"\n          type=\"text\"\n          onChange={e => {\n            setColorValue(e.target.value);\n          }}\n        />\n        <button\n          onClick={() => {\n            setVariable('boxColor', colorValue);\n          }}\n          type=\"button\">\n          Set\n        </button>\n        <div className=\"box\" />\n        <div className=\"count\">\n          Render count: <strong>{renderCount}</strong>\n        </div>\n      </fieldset>\n    </div>\n  );\n};\n","import React, {useLayoutEffect, useEffect, useState} from 'react';\nimport {useVariable} from 'lib';\nimport './style.css';\n\nlet renderCount = 0;\n\nexport const DemoMovement = () => {\n  const {setRef, ref, setVariable, getVariable} = useVariable('shift', 0);\n  const [stop, setStop] = useState('false');\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const current = parseInt(getVariable('shift'), 10);\n      if (!stop) {\n        current < 600 ? setVariable('shift', current + 1) : setVariable('shift', current - 600);\n      }\n    }, 10);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [ref, stop, setVariable, getVariable]);\n  useLayoutEffect(() => {\n    // eslint-disable-next-line fp/no-mutation\n    renderCount += 1;\n  });\n  return (\n    <div className=\"demo-movement\" ref={setRef}>\n      <fieldset>\n        {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n        <label>Click the button to move box</label>\n        <button\n          onClick={() => {\n            setStop(prevState => !prevState);\n          }}\n          type=\"button\">\n          {stop ? 'Run' : 'Stop'}\n        </button>\n        <div className=\"box\" />\n        <div className=\"count\">\n          Render count: <strong>{renderCount}</strong>\n        </div>\n      </fieldset>\n    </div>\n  );\n};\n","import {useTheme} from 'lib/useTheme';\n\n/**\n * @typedef {Object} UseThemeInterface\n * @property {MutableRefObject<HTMLElement>} ref - React ref. Use as theme container element getter only.\n * @property {function(HTMLElement | null): void} setRef - Theme container element setter.\n * @property {Object<string, string>} style - Theme object with all property names prefixed `--`.\n * @property {function(string): string} getVariable - Get variable value. getCSSVariable with bound ref.\n * @see src/lib/utils.js\n * @property {function(variableName: string, value: (string|number)): void} setVariable - Set variable value. setCSSVariable with bound ref.\n * @property {function(variableName: string): string} getVariable - Get variable value. getCSSVariable with bound ref.\n * @property {function(variableName: string): void} removeVariable - Remove variable. removeCSSVariable with bound ref.\n */\n\n/** @function\n * @name useTheme\n * @description React hook to apply multiple CSS variables and manipulate them.\n * @param {string} name - Name of the variable, without `--`.\n * @param {string|number} value - value of the variable.\n * @return {UseThemeInterface}\n */\n\nexport const useVariable = (name, value) => {\n  const {ref, setRef, style, setVariable, getVariable, removeVariable} = useTheme({[name]: value});\n  return {\n    ref,\n    setRef,\n    style,\n    setVariable,\n    getVariable,\n    removeVariable,\n  };\n};\n","import React from 'react';\nimport {DemoColor} from 'environment/DemoColor';\nimport {DemoMovement} from 'environment/DemoMovement';\nimport classes from './App.module.css';\n\nconst App = () => (\n  <div className={classes.container}>\n    <DemoColor />\n    <DemoMovement />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './environment/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__13NT6\"};"],"sourceRoot":""}